##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Messaging < Domain
      class V1 < Version
        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class CampaignList < ListResource
          ##
          # Initialize the CampaignList
          # @param [Version] version Version that contains the resource
          # @return [CampaignList] CampaignList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/a2p/Campaigns"
          end

          ##
          # Lists CampaignInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(limit: nil, page_size: nil)
            self.stream(limit: limit, page_size: page_size).entries
          end

          ##
          # Streams CampaignInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields CampaignInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of CampaignInstance records from the API.
          # Request is executed immediately.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of CampaignInstance
          def page(page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })

            response = @version.page('GET', @uri, params: params)

            CampaignPage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of CampaignInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of CampaignInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            CampaignPage.new(@version, response, @solution)
          end

          ##
          # Create the CampaignInstance
          # @param [String] brand_registration_sid A2P BrandRegistration Sid
          # @param [String] use_case A2P Campaign UseCase. One of [ 2FA, EMERGENCY,
          #   MARKETING ]
          # @param [String] description A short description of what this SMS campaign does.
          # @param [Array[String]] message_samples Message samples, up to 5 sample messages,
          #   <=255 chars each. Example: [ "EXPRESS: Denim Days Event is ON", "LAST CHANCE:
          #   Book your next flight for just 1 (ONE) EUR" ]
          # @param [Boolean] has_embedded_links Indicate that this SMS campaign will send
          #   messages that contain links.
          # @param [Boolean] has_embedded_phone Indicates that this SMS campaign will send
          #   messages that contain phone numbers.
          # @param [String] messaging_service_sid The SID of the
          #   {Service}[https://www.twilio.com/docs/chat/rest/service-resource] to read the
          #   resources from.
          # @return [CampaignInstance] Created CampaignInstance
          def create(brand_registration_sid: nil, use_case: nil, description: nil, message_samples: nil, has_embedded_links: nil, has_embedded_phone: nil, messaging_service_sid: nil)
            data = Twilio::Values.of({
                'BrandRegistrationSid' => brand_registration_sid,
                'UseCase' => use_case,
                'Description' => description,
                'MessageSamples' => Twilio.serialize_list(message_samples) { |e| e },
                'HasEmbeddedLinks' => has_embedded_links,
                'HasEmbeddedPhone' => has_embedded_phone,
                'MessagingServiceSid' => messaging_service_sid,
            })

            payload = @version.create('POST', @uri, data: data)

            CampaignInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Messaging.V1.CampaignList>'
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class CampaignPage < Page
          ##
          # Initialize the CampaignPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [CampaignPage] CampaignPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of CampaignInstance
          # @param [Hash] payload Payload response from the API
          # @return [CampaignInstance] CampaignInstance
          def get_instance(payload)
            CampaignInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Messaging.V1.CampaignPage>'
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class CampaignContext < InstanceContext
          ##
          # Initialize the CampaignContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid The SID of the Campaign resource to fetch.
          # @return [CampaignContext] CampaignContext
          def initialize(version, sid)
            super(version)

            # Path Solution
            @solution = {sid: sid, }
            @uri = "/a2p/Campaigns/#{@solution[:sid]}"
          end

          ##
          # Fetch the CampaignInstance
          # @return [CampaignInstance] Fetched CampaignInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            CampaignInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Delete the CampaignInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
             @version.delete('DELETE', @uri)
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Messaging.V1.CampaignContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Messaging.V1.CampaignContext #{context}>"
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class CampaignInstance < InstanceResource
          ##
          # Initialize the CampaignInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid The SID of the Campaign resource to fetch.
          # @return [CampaignInstance] CampaignInstance
          def initialize(version, payload, sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'account_sid' => payload['account_sid'],
                'messaging_service_sid' => payload['messaging_service_sid'],
                'brand_registration_sid' => payload['brand_registration_sid'],
                'sid' => payload['sid'],
                'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                'description' => payload['description'],
                'message_samples' => payload['message_samples'],
                'status' => payload['status'],
                'failure_reason' => payload['failure_reason'],
                'use_case' => payload['use_case'],
                'has_embedded_links' => payload['has_embedded_links'],
                'has_embedded_phone' => payload['has_embedded_phone'],
                'url' => payload['url'],
            }

            # Context
            @instance_context = nil
            @params = {'sid' => sid || @properties['sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [CampaignContext] CampaignContext for this CampaignInstance
          def context
            unless @instance_context
              @instance_context = CampaignContext.new(@version, @params['sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] The SID of the Account that created the resource
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [String] MessagingService SID
          def messaging_service_sid
            @properties['messaging_service_sid']
          end

          ##
          # @return [String] A2P BrandRegistration Sid
          def brand_registration_sid
            @properties['brand_registration_sid']
          end

          ##
          # @return [String] Campaign sid
          def sid
            @properties['sid']
          end

          ##
          # @return [Time] The ISO 8601 date and time in GMT when the resource was created
          def date_created
            @properties['date_created']
          end

          ##
          # @return [Time] The ISO 8601 date and time in GMT when the resource was last updated
          def date_updated
            @properties['date_updated']
          end

          ##
          # @return [String] A short description of what this SMS campaign does
          def description
            @properties['description']
          end

          ##
          # @return [Array[String]] Message samples
          def message_samples
            @properties['message_samples']
          end

          ##
          # @return [campaign.Status] Campaign status
          def status
            @properties['status']
          end

          ##
          # @return [String] A reason why campaign registration has failed
          def failure_reason
            @properties['failure_reason']
          end

          ##
          # @return [String] A2P Campaign UseCase.
          def use_case
            @properties['use_case']
          end

          ##
          # @return [Boolean] Indicate that this SMS campaign will send messages that contain links
          def has_embedded_links
            @properties['has_embedded_links']
          end

          ##
          # @return [Boolean] Indicates that this SMS campaign will send messages that contain phone numbers
          def has_embedded_phone
            @properties['has_embedded_phone']
          end

          ##
          # @return [String] The absolute URL of the Campaign resource
          def url
            @properties['url']
          end

          ##
          # Fetch the CampaignInstance
          # @return [CampaignInstance] Fetched CampaignInstance
          def fetch
            context.fetch
          end

          ##
          # Delete the CampaignInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
            context.delete
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Messaging.V1.CampaignInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Messaging.V1.CampaignInstance #{values}>"
          end
        end
      end
    end
  end
end
##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'OpenidDiscovery' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.oauth.v1.openid_discovery().fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://oauth.twilio.com/v1/well-known/openid-configuration',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "issuer": "https://iam.twilio.com",
          "authorization_endpoint": "https://oauth.twilio.com/oauth2/authorize",
          "device_authorization_endpoint": "https://oauth.twilio.com/oauth2/device/authorize",
          "token_endpoint": "https://oauth.twilio.com/oauth2/token",
          "userinfo_endpoint": "https://oauth.twilio.com/oauth2/userinfo",
          "revocation_endpoint": "https://oauth.twilio.com/oauth2/revoke",
          "jwk_uri": "https://oauth.twilio.com/oauth2/certs",
          "response_type_supported": [
              "code",
              "token"
          ],
          "subject_type_supported": [
              "account_sid",
              "user_sid"
          ],
          "id_token_signing_alg_values_supported": [
              "ECDSA",
              "RSA256"
          ],
          "scopes_supported": [
              "openid",
              "profile",
              "email"
          ],
          "claims_supported": [
              "act",
              "aud",
              "cid",
              "device_id",
              "exp",
              "jti",
              "iat",
              "iss",
              "nbf",
              "scp",
              "sub"
          ],
          "url": "https://oauth.twilio.com/v1/well-known/openid-configuration"
      }
      ]
    ))

    actual = @client.oauth.v1.openid_discovery().fetch()

    expect(actual).to_not eq(nil)
  end
end
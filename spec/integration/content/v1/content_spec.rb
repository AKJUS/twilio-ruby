##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'Content' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.content.v1.contents('HXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://content.twilio.com/v1/Content/HXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sid": "HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "friendly_name": "Some content",
          "language": "en",
          "variables": {
              "name": "foo"
          },
          "types": {
              "twilio/text": {
                  "body": "Foo Bar Co is located at 39.7392, 104.9903"
              },
              "twilio/location": {
                  "longitude": 104.9903,
                  "latitude": 39.7392,
                  "label": "Foo Bar Co"
              }
          },
          "url": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "date_created": "2015-07-30T19:00:00Z",
          "date_updated": "2015-07-30T19:00:00Z",
          "links": {
              "approval_create": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests/whatsapp",
              "approval_fetch": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests"
          }
      }
      ]
    ))

    actual = @client.content.v1.contents('HXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()

    expect(actual).to_not eq(nil)
  end

  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.content.v1.contents.create()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://content.twilio.com/v1/Content',
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "sid": "HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "friendly_name": "",
          "language": "en",
          "variables": {
              "name": "foo"
          },
          "types": {
              "twilio/text": {
                  "body": "Foo Bar Co is located at 39.7392, 104.9903"
              },
              "twilio/location": {
                  "longitude": 104.9903,
                  "latitude": 39.7392,
                  "label": "Foo Bar Co"
              }
          },
          "url": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "date_created": "2015-07-30T19:00:00Z",
          "date_updated": "2015-07-30T19:00:00Z",
          "links": {
              "approval_create": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests/whatsapp",
              "approval_fetch": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests"
          }
      }
      ]
    ))

    actual = @client.content.v1.contents.create()

    expect(actual).to_not eq(nil)
  end

  it "can delete" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.content.v1.contents('HXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').delete()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'delete',
        url: 'https://content.twilio.com/v1/Content/HXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives delete responses" do
    @holodeck.mock(Twilio::Response.new(
        204,
      nil,
    ))

    actual = @client.content.v1.contents('HXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').delete()

    expect(actual).to eq(true)
  end

  it "can read" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.content.v1.contents.list()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://content.twilio.com/v1/Content',
    ))).to eq(true)
  end

  it "receives read_empty responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "contents": [],
          "meta": {
              "page": 0,
              "page_size": 10,
              "first_page_url": "https://content.twilio.com/v1/Content?PageSize=10&Page=0",
              "previous_page_url": null,
              "url": "https://content.twilio.com/v1/Content?PageSize=10&Page=0",
              "next_page_url": null,
              "key": "contents"
          }
      }
      ]
    ))

    actual = @client.content.v1.contents.list()

    expect(actual).to_not eq(nil)
  end

  it "receives read_results responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "contents": [
              {
                  "sid": "HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "friendly_name": "Some content",
                  "language": "en",
                  "variables": {
                      "name": "foo"
                  },
                  "types": {
                      "twilio/text": {
                          "body": "Foo Bar Co is located at 39.7392, 104.9903"
                      },
                      "twilio/location": {
                          "longitude": 104.9903,
                          "latitude": 39.7392,
                          "label": "Foo Bar Co"
                      }
                  },
                  "url": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "date_created": "2015-07-30T19:00:00Z",
                  "date_updated": "2015-07-30T19:00:00Z",
                  "links": {
                      "approval_create": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests/whatsapp",
                      "approval_fetch": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests"
                  }
              },
              {
                  "sid": "HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "friendly_name": "Anotha content",
                  "language": "en",
                  "variables": {
                      "name": "foo"
                  },
                  "types": {
                      "twilio/text": {
                          "body": "Foo Bar Co is located at 39.7392, 104.9903"
                      },
                      "twilio/location": {
                          "longitude": 104.9903,
                          "latitude": 39.7392,
                          "label": "Foo Bar Co"
                      }
                  },
                  "url": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "date_created": "2015-07-30T19:00:00Z",
                  "date_updated": "2015-07-30T19:00:00Z",
                  "links": {
                      "approval_create": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests/whatsapp",
                      "approval_fetch": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests"
                  }
              },
              {
                  "sid": "HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "friendly_name": "Third content",
                  "language": "en",
                  "variables": {
                      "name": "foo"
                  },
                  "types": {
                      "twilio/text": {
                          "body": "Foo Bar Co is located at 39.7392, 104.9903"
                      },
                      "twilio/location": {
                          "longitude": 104.9903,
                          "latitude": 39.7392,
                          "label": "Foo Bar Co"
                      }
                  },
                  "url": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "date_created": "2015-07-30T19:00:00Z",
                  "date_updated": "2015-07-30T19:00:00Z",
                  "links": {
                      "approval_create": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests/whatsapp",
                      "approval_fetch": "https://content.twilio.com/v1/Content/HXaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ApprovalRequests"
                  }
              }
          ],
          "meta": {
              "page": 0,
              "page_size": 20,
              "first_page_url": "https://content.twilio.com/v1/Content?PageSize=20&Page=0",
              "previous_page_url": null,
              "url": "https://content.twilio.com/v1/Content?PageSize=20&Page=0",
              "next_page_url": null,
              "key": "contents"
          }
      }
      ]
    ))

    actual = @client.content.v1.contents.list()

    expect(actual).to_not eq(nil)
  end
end
##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'Safelist' do
  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.verify.v2.safelist.create(phone_number: 'phone_number')
    }.to raise_exception(Twilio::REST::TwilioError)

    values = {'PhoneNumber' => 'phone_number', }
    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://verify.twilio.com/v2/SafeList/Numbers',
        data: values,
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "sid": "GNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "phone_number": "+18001234567",
          "url": "https://verify.twilio.com/v2/SafeList/Numbers/+18001234567"
      }
      ]
    ))

    actual = @client.verify.v2.safelist.create(phone_number: 'phone_number')

    expect(actual).to_not eq(nil)
  end

  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.verify.v2.safelist('phone_number').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://verify.twilio.com/v2/SafeList/Numbers/phone_number',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sid": "GNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "phone_number": "+18001234567",
          "url": "https://verify.twilio.com/v2/SafeList/Numbers/+18001234567"
      }
      ]
    ))

    actual = @client.verify.v2.safelist('phone_number').fetch()

    expect(actual).to_not eq(nil)
  end

  it "can delete" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.verify.v2.safelist('phone_number').delete()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'delete',
        url: 'https://verify.twilio.com/v2/SafeList/Numbers/phone_number',
    ))).to eq(true)
  end

  it "receives delete responses" do
    @holodeck.mock(Twilio::Response.new(
        204,
      nil,
    ))

    actual = @client.verify.v2.safelist('phone_number').delete()

    expect(actual).to eq(true)
  end
end
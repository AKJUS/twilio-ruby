##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'Campaign' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://messaging.twilio.com/v1/a2p/Campaigns/CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sid": "CMdeadbeef66043a43b62be6d67c635c85",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "messaging_service_sid": "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "date_created": "2021-01-27T14:47:52Z",
          "date_updated": "2021-01-27T14:47:52Z",
          "description": "Test description for test campaing",
          "message_samples": [
              "Test_Sample_1",
              "Another_test_sample_2"
          ],
          "status": "pending",
          "failure_reason": null,
          "use_case": "PUBLIC_SERVICE_ANNOUNCEMENT",
          "has_embedded_links": true,
          "has_embedded_phone": false,
          "brand_registration_sid": "BN0044409f7e067e279523808d267e2d85",
          "url": "https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85"
      }
      ]
    ))

    actual = @client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()

    expect(actual).to_not eq(nil)
  end

  it "can read" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.campaigns.list()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://messaging.twilio.com/v1/a2p/Campaigns',
    ))).to eq(true)
  end

  it "receives read_full responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "meta": {
              "page": 0,
              "page_size": 50,
              "first_page_url": "https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0",
              "previous_page_url": null,
              "next_page_url": null,
              "key": "data",
              "url": "https://messaging.twilio.com/v1/a2p/Campaigns?PageSize=50&Page=0"
          },
          "data": [
              {
                  "sid": "CMdeadbeef66043a43b62be6d67c635c85",
                  "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "messaging_service_sid": "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "date_created": "2021-01-27T14:47:52Z",
                  "date_updated": "2021-01-27T14:47:53Z",
                  "description": "Test description for test campaing",
                  "message_samples": [
                      "Test_Sample_1",
                      "Another_test_sample_2"
                  ],
                  "status": "pending",
                  "failure_reason": null,
                  "use_case": "GAMBLING_SWEEPSTAKE",
                  "has_embedded_links": true,
                  "has_embedded_phone": false,
                  "brand_registration_sid": "BN0044409f7e067e279523808d267e2d85",
                  "url": "https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85"
              }
          ]
      }
      ]
    ))

    actual = @client.messaging.v1.campaigns.list()

    expect(actual).to_not eq(nil)
  end

  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.campaigns.create(brand_registration_sid: 'BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', use_case: 'use_case', description: 'description', message_samples: ['message_samples'], has_embedded_links: true, has_embedded_phone: true, messaging_service_sid: 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
    }.to raise_exception(Twilio::REST::TwilioError)

    values = {
        'BrandRegistrationSid' => 'BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        'UseCase' => 'use_case',
        'Description' => 'description',
        'MessageSamples' => Twilio.serialize_list(['message_samples']) { |e| e },
        'HasEmbeddedLinks' => true,
        'HasEmbeddedPhone' => true,
        'MessagingServiceSid' => 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    }
    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://messaging.twilio.com/v1/a2p/Campaigns',
        data: values,
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "sid": "CMdeadbeef66043a43b62be6d67c635c85",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "messaging_service_sid": "MG3u3kcgofdljponkatswl3ad3ev0c123u",
          "brand_registration_sid": "BN0044409f7e067e279523808d267e2d85",
          "date_created": "2021-01-27T14:47:52Z",
          "date_updated": "2021-01-27T14:47:52Z",
          "description": "Send marketing messages about sales and offers to opted in customers.",
          "message_samples": [
              "EXPRESS: Denim Days Event is ON",
              "LAST CHANCE: Book your next flight for just 1 (ONE) EUR"
          ],
          "status": "pending",
          "failure_reason": null,
          "use_case": "2FA",
          "has_embedded_links": true,
          "has_embedded_phone": false,
          "url": "https://messaging.twilio.com/v1/a2p/Campaigns/CMdeadbeef66043a43b62be6d67c635c85"
      }
      ]
    ))

    actual = @client.messaging.v1.campaigns.create(brand_registration_sid: 'BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', use_case: 'use_case', description: 'description', message_samples: ['message_samples'], has_embedded_links: true, has_embedded_phone: true, messaging_service_sid: 'MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')

    expect(actual).to_not eq(nil)
  end

  it "can delete" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').delete()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'delete',
        url: 'https://messaging.twilio.com/v1/a2p/Campaigns/CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives delete responses" do
    @holodeck.mock(Twilio::Response.new(
        204,
      nil,
    ))

    actual = @client.messaging.v1.campaigns('CMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').delete()

    expect(actual).to eq(true)
  end
end
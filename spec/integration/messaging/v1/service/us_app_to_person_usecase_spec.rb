##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'UsAppToPersonUsecase' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.services('MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') \
                          .us_app_to_person_usecases.fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://messaging.twilio.com/v1/Services/MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Compliance/Usa2p/Usecases',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "us_app_to_person_usecases": [
              {
                  "code": "MARKETING",
                  "name": "Marketing",
                  "description": "Send marketing messages about sales and offers to opted in customers."
              },
              {
                  "code": "DELIVERY_NOTIFICATION",
                  "name": "Delivery Notification",
                  "description": "Information about the status of the delivery of a product or service."
              }
          ]
      }
      ]
    ))

    actual = @client.messaging.v1.services('MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') \
                                 .us_app_to_person_usecases.fetch()

    expect(actual).to_not eq(nil)
  end
end